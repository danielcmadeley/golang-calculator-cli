#!/usr/bin/env python3
"""
Calculator Generator - Demo Script
This script demonstrates the capabilities of calculators generated by the CLI tool.
"""

import subprocess
import sys
import os
import time

def run_calculator_test(calculator_file, commands, description):
    """Run a test on a calculator with given commands"""
    print(f"\n{'='*60}")
    print(f"Testing: {description}")
    print(f"File: {calculator_file}")
    print(f"{'='*60}")

    if not os.path.exists(calculator_file):
        print(f"‚ùå Calculator file not found: {calculator_file}")
        return

    # Join commands with newlines and add quit at the end
    input_commands = "\n".join(commands + ["quit"])

    try:
        # Run the calculator with input commands
        result = subprocess.run(
            [sys.executable, calculator_file],
            input=input_commands,
            text=True,
            capture_output=True,
            timeout=10
        )

        print("üìù Commands executed:")
        for i, cmd in enumerate(commands, 1):
            print(f"  {i}. {cmd}")

        print("\nüìä Output:")
        # Filter out the banner and prompt text for cleaner output
        lines = result.stdout.split('\n')
        filtered_lines = []
        for line in lines:
            if line.strip() and not line.startswith('calc>') and not line.startswith('='):
                if not line.startswith('Calculator started') and not line.strip() == '':
                    filtered_lines.append(line)

        for line in filtered_lines:
            print(f"  {line}")

        if result.stderr:
            print(f"\n‚ö†Ô∏è  Errors: {result.stderr}")

    except subprocess.TimeoutExpired:
        print("‚è±Ô∏è  Test timed out")
    except Exception as e:
        print(f"‚ùå Error running test: {e}")

def main():
    """Main demo function"""
    print("üî¢ Calculator Generator - Demonstration")
    print("=" * 50)
    print("This demo shows the capabilities of various generated calculators.")
    print()

    # Demo 1: Basic Calculator
    run_calculator_test(
        "basic_calculator.py",
        [
            "2 + 3 * 4",
            "15 / 3",
            "2 ** 8",
            "17 % 5",
            "sqrt(25)"
        ],
        "Basic Calculator - Simple arithmetic operations"
    )

    # Demo 2: Enhanced Basic Calculator with Memory
    run_calculator_test(
        "enhanced_basic.py",
        [
            "42 * 2",
            "mem store 84",
            "10 + 5",
            "mem recall",
            "sin(30)",
            "log(100)",
            "hist show 3"
        ],
        "Enhanced Basic Calculator - With memory, history, and scientific functions"
    )

    # Demo 3: Scientific Calculator
    run_calculator_test(
        "scientific.py",
        [
            "sin(1.57)",  # sin(œÄ/2) in radians
            "cos(3.14159)",  # cos(œÄ) in radians
            "log(2.718)",
            "mean([1, 2, 3, 4, 5])",
            "std([1, 2, 3, 4, 5])"
        ],
        "Scientific Calculator - Advanced mathematical functions"
    )

    # Demo 4: Data Analysis Calculator
    run_calculator_test(
        "data_analysis.py",
        [
            "mean([10, 20, 30, 40, 50])",
            "median([1, 3, 5, 7, 9])",
            "std([2, 4, 6, 8, 10])",
            "variance([1, 2, 3, 4, 5])"
        ],
        "Data Analysis Calculator - Statistical operations"
    )

    print(f"\n{'='*60}")
    print("‚úÖ Demo completed!")
    print("üí° Try running the calculators interactively:")
    print("   python basic_calculator.py")
    print("   python enhanced_basic.py")
    print("   python scientific.py")
    print(f"{'='*60}")

if __name__ == "__main__":
    main()
